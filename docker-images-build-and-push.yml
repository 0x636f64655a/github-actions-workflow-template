name: Build & Push Docker Image
permissions:
  contents: read
  packages: write
on:
  push:
    branches:
      - main
  release:
    types:
      - released
  workflow_dispatch:

jobs:
  docker_build_and_push:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        platforms: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "GH_FULL_REPO_NAME=$GITHUB_REPOSITORY" >> $GITHUB_ENV
          echo "REPO_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
          echo "GH_REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Existing Releases & Set Image Tags
        id: check_release
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName') >> $GITHUB_ENV

          if [[ -z "$LATEST_RELEASE" ]]; then
            echo "No releases found. Using 'latest' as the only tag."
            echo "IMAGE_TAGS= \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest, \
            ghcr.io/$GH_FULL_REPO_NAME:latest" \
            >> $GITHUB_ENV
          else
            echo "Latest release found: $LATEST_RELEASE"
            echo "IMAGE_TAGS= \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:$LATEST_RELEASE, \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest, \
            ghcr.io/$GH_FULL_REPO_NAME:$LATEST_RELEASE, \
            ghcr.io/$GH_FULL_REPO_NAME:latest" \
            >> $GITHUB_ENV
          fi

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:cache,mode=max
          tags: ${{ env.IMAGE_TAGS }}
          platforms: ${{ matrix.platforms }}
          labels: |
            org.opencontainers.image.title="${{ env.REPO_NAME }}"
            org.opencontainers.image.maintainer="codeZ"
            org.opencontainers.image.version="${{ env.LATEST_RELEASE }}"
            org.opencontainers.image.source="$GH_REPO_URL"
            org.opencontainers.image.description="A Docker image automatically built from the repo $GH_FULL_REPO_NAME."
          push: true

      - name: Check & Set GHCR Image Visibility
        id: check_and_set_visibility
        run: |
          # Fetch current visibility
          CURRENT_VISIBILITY=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            "/user/packages/container/$REPO_NAME" \
            --jq '.visibility // empty')
          
          if [[ -z "$CURRENT_VISIBILITY" ]]; then
            echo "Failed to fetch visibility. Check your repository permissions."
            exit 1
          fi
      
          echo "Current visibility: $CURRENT_VISIBILITY"
      
          # Change visibility only if it's not already public
          if [[ "$CURRENT_VISIBILITY" != "public" ]]; then
            echo "Updating visibility to public..."
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              "/user/packages/container/$REPO_NAME/visibility" \
              -f visibility="public"
            echo "Visibility updated to public."
          else
            echo "Visibility is already public. No changes needed."
          fi

      - name: Validate & Set GHCR Linking
        id: validate_and_set_ghcr_linking
        run: |
          LINKED_REPO=$(gh api /user/packages/container/$REPO_NAME/repositories --jq '.repositories[] | select(.full_name == "$GH_FULL_REPO_NAME")' || echo "")
          GH_REPOSITORY_id=${{ github.repository_id }}
          if [[ -z "$LINKED_REPO" ]]; then
            echo "Linking repository to GHCR package..."
            
            gh api --method PUT \
              -H "Accept: application/vnd.github.v3+json" \
              /user/packages/container/$REPO_NAME/repositories \
              -f repository_id=$GH_REPOSITORY_id || {
                echo "Failed to link repository to GHCR package!"
                exit 1
              }
          
            echo "Repository successfully linked to GHCR package."
          fi
