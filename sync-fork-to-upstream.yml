name: Sync all branches
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  retrieve-upstream-info:
    outputs:
      upstream_owner: ${{ steps.get-info.outputs.upstream_owner }}
      upstream_repo: ${{ steps.get-info.outputs.upstream_repo }}
    steps:
      - name: Get upstream repository info via API
        id: get-info
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}")
          
          UPSTREAM_OWNER=$(echo "$RESPONSE" | jq -r '.parent.owner.login // empty')
          UPSTREAM_REPO=$(echo "$RESPONSE" | jq -r '.parent.full_name // empty')
      
          if [[ -z "$UPSTREAM_OWNER" || -z "$UPSTREAM_REPO" ]]; then
            echo "This repository is not a fork."
            exit 1
          else
            echo "upstream_owner=$UPSTREAM_OWNER" >> "$GITHUB_OUTPUT"
            echo "upstream_repo=$UPSTREAM_REPO" >> "$GITHUB_OUTPUT"
          fi

  generate-matrix:
    name: Generate matrix of branches
    runs-on: ubuntu-latest
    needs: retrieve-upstream-info
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix of branches
        id: set-matrix
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_UPSTREAM_REPOSITORY: ${{ needs.retrieve-upstream-info.outputs.upstream_owner }}/${{ needs.retrieve-upstream-info.outputs.upstream_repo }}
        run: |
          upstream_repo="https://${GITHUB_ACTOR}:${INPUT_GITHUB_TOKEN}@github.com/${INPUT_UPSTREAM_REPOSITORY}.git"

          # these jq scripts will produce the same matrix jobs by default
          # choose the one that works for any additional values that you may need to build your matrix with
          jq_script='{ "branch": [inputs | split("\n") | .[] | gsub(".*refs/heads/"; "")] }'   # {"branch":["$branch_name_1","$branch_name_2"]}
          # jq_script='[inputs | split("\n") | .[] | gsub(".*refs/heads/"; "") | { "branch": . }]' # [{"branch":"$branch_name_1"},{"branch":"$branch_name_2"}]

          JSON="$(git ls-remote --heads "$upstream_repo" | jq -McnR "$jq_script")"

          # debug matrix pretty json formatted output
          jq --monochrome-output . -- <<< "$JSON"

          # set output variable named 'matrix' for use in subsequent jobs that 'needs' this job.
          # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  sync_fork:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          fetch-depth: 0  # Ensure full history is available for sync

      - name: Backup .github/workflows (if exists)
        id: backup_workflows
        run: |
          if [ -d ".github/workflows" ]; then
            echo "Backing up .github/workflows..."
            mkdir -p workflows_backup
            cp -r .github/workflows workflows_backup/
            echo "exists=true" >> "$GITHUB_ENV"
          else
            echo "No .github/workflows directory found. Skipping backup."
          fi

      - name: Sync fork
        uses: TobKed/github-forks-sync-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_repository: ${{ needs.retrieve-upstream-info.outputs.upstream_owner }}/${{ needs.retrieve-upstream-info.outputs.upstream_repo }}
          target_repository: ${{ github.repository }}
          upstream_branch: ${{ matrix.branch }}
          target_branch: ${{ matrix.branch }}
          force: true
          tags: true

      - name: Restore local .github/workflows
        run: |
          if [ "$exists" = "true" ]; then
            echo "Restoring .github/workflows..."
            rm -rf .github/workflows
            mv workflows_backup .github/workflows
            git restore --staged .github/workflows/ 
          else
            echo "Skipping restore as .github/workflows was not found." 
          fi

      - name: Check if tags exist
        id: check_tags_exsitence
        run: |
          # Check if there are any tags
          TAG_COUNT=$(git tag -l | wc -l)
          
          if [ "$TAG_COUNT" -gt 0 ]; then
            echo "Tags are detected."
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_ENV"
          else
            echo "No tags found in the repository."
            echo "LATEST_TAG=''" >> "$GITHUB_ENV"
          fi

      - name: Check new tag and output status
        id: check_new_tag
        run: |
          if [ ! -d ".github/workflows/artifacts" ]; then
            echo "Creating .github/workflows/artifacts directory..."
            mkdir -p .github/workflows/artifacts
          fi

          prev_tag_file=".github/workflows/artifacts/previous_tag.txt"

          if [ -f "$prev_tag_file" ]; then
            previous_tag=$(cat "$prev_tag_file")
            echo "Previous tag: $previous_tag"

          if git merge-base --is-ancestor "$previous_tag" "$LATEST_TAG"; then
            echo "New tag detected. Updating previous_tag.txt..."
            echo "$LATEST_TAG" > "$prev_tag_file"
            echo "is_new_tag=true" >> "$GITHUB_ENV"
          else
            echo "Tag is not newer. No update needed."
            echo "is_new_tag=false" >> "$GITHUB_ENV"
          fi

      - name: Upload tag status artifact
        uses: actions/upload-artifact@v4
        with:
          name: is_new_tag
          path: <(echo "${{ steps.check_new_tag.outputs.is_new_tag }}")
          retention-days: 7
