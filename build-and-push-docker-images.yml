name: Build & Push Docker Image
permissions:
  contents: read
  packages: write
on:
  push:
    branches:
      - main
  release:
    types:
      - released
  workflow_dispatch:

jobs:
  docker_build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Docker Repository Name (Only Repo Name)
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          echo "DOCKER_REPO=${REPO_NAME}" >> $GITHUB_ENV
      - name: Check for Existing Releases & Define Tags
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [[ -z "$LATEST_RELEASE" ]]; then
            echo "No releases found. Using 'latest' as the only tag."
            echo "IMAGE_TAGS=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:latest,ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
          else
            echo "Latest release found: $LATEST_RELEASE"
            echo "IMAGE_TAGS=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:$LATEST_RELEASE,${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:latest,ghcr.io/${{ github.repository }}:$LATEST_RELEASE,ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
          fi
      - name: Build And Push
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:cache,mode=max
          tags: ${{ env.IMAGE_TAGS }}
          platforms: linux/amd64,linux/arm64
          push: true
